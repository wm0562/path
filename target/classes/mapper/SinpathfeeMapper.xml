<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.path.dao.SinpathfeeMapper">
  <resultMap id="BaseResultMap" type="com.path.bean.Sinpathfee">
    <id column="pathfee_id" jdbcType="INTEGER" property="pathfeeId" />
    <result column="pid" jdbcType="INTEGER" property="pid" />
    <result column="did" jdbcType="INTEGER" property="did" />
    <result column="path_id" jdbcType="INTEGER" property="pathId" />
    <result column="hosp_exp" jdbcType="VARCHAR" property="hospExp" />
    <result column="med_exp" jdbcType="VARCHAR" property="medExp" />
    <result column="drug_exp" jdbcType="VARCHAR" property="drugExp" />
    <result column="case_id" jdbcType="INTEGER" property="caseId" />
  </resultMap>
  
  <resultMap id="BaseResultMap1" type="com.path.bean.Sinpathfeenew">
    <id column="path_id" jdbcType="INTEGER" property="path_id" />
    <result column="cname" jdbcType="VARCHAR" property="cname" />
    <result column="hosp_exp" jdbcType="VARCHAR" property="hosp_exp" />
    <result column="med_exp" jdbcType="VARCHAR" property="med_exp" />
    <result column="drug_exp" jdbcType="VARCHAR" property="drug_exp" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    pathfee_id, pid, did, path_id, hosp_exp, med_exp, drug_exp, case_id
  </sql>
  <select id="selectByExample" parameterType="com.path.bean.SinpathfeeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sin_path_fee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sin_path_fee
    where pathfee_id = #{pathfeeId,jdbcType=INTEGER}
  </select>
  
  <select id="getSinPathFee" parameterType="java.lang.Integer" resultMap="BaseResultMap1">
    select a.path_id,a.cname,s.hosp_exp,s.med_exp,s.drug_exp
     FROM sin_path_fee s left join path a on s.path_id=a.path_id
    where a.path_id=#{mid,jdbcType=INTEGER}
  </select>
  <select id="selectByPrimaryKey1" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sin_path_fee
    where pathfee_id = #{pathfeeId,jdbcType=INTEGER}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from sin_path_fee
    where pathfee_id = #{pathfeeId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.path.bean.SinpathfeeExample">
    delete from sin_path_fee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.path.bean.Sinpathfee">
    insert into sin_path_fee (pathfee_id, pid, did, 
      path_id, hosp_exp, med_exp, 
      drug_exp, case_id)
    values (#{pathfeeId,jdbcType=INTEGER}, #{pid,jdbcType=INTEGER}, #{did,jdbcType=INTEGER}, 
      #{pathId,jdbcType=INTEGER}, #{hospExp,jdbcType=VARCHAR}, #{medExp,jdbcType=VARCHAR}, 
      #{drugExp,jdbcType=VARCHAR}, #{caseId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.path.bean.Sinpathfee">
    insert into sin_path_fee
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="pathfeeId != null">
        pathfee_id,
      </if>
      <if test="pid != null">
        pid,
      </if>
      <if test="did != null">
        did,
      </if>
      <if test="pathId != null">
        path_id,
      </if>
      <if test="hospExp != null">
        hosp_exp,
      </if>
      <if test="medExp != null">
        med_exp,
      </if>
      <if test="drugExp != null">
        drug_exp,
      </if>
      <if test="caseId != null">
        case_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="pathfeeId != null">
        #{pathfeeId,jdbcType=INTEGER},
      </if>
      <if test="pid != null">
        #{pid,jdbcType=INTEGER},
      </if>
      <if test="did != null">
        #{did,jdbcType=INTEGER},
      </if>
      <if test="pathId != null">
        #{pathId,jdbcType=INTEGER},
      </if>
      <if test="hospExp != null">
        #{hospExp,jdbcType=VARCHAR},
      </if>
      <if test="medExp != null">
        #{medExp,jdbcType=VARCHAR},
      </if>
      <if test="drugExp != null">
        #{drugExp,jdbcType=VARCHAR},
      </if>
      <if test="caseId != null">
        #{caseId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.path.bean.SinpathfeeExample" resultType="java.lang.Long">
    select count(*) from sin_path_fee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update sin_path_fee
    <set>
      <if test="record.pathfeeId != null">
        pathfee_id = #{record.pathfeeId,jdbcType=INTEGER},
      </if>
      <if test="record.pid != null">
        pid = #{record.pid,jdbcType=INTEGER},
      </if>
      <if test="record.did != null">
        did = #{record.did,jdbcType=INTEGER},
      </if>
      <if test="record.pathId != null">
        path_id = #{record.pathId,jdbcType=INTEGER},
      </if>
      <if test="record.hospExp != null">
        hosp_exp = #{record.hospExp,jdbcType=VARCHAR},
      </if>
      <if test="record.medExp != null">
        med_exp = #{record.medExp,jdbcType=VARCHAR},
      </if>
      <if test="record.drugExp != null">
        drug_exp = #{record.drugExp,jdbcType=VARCHAR},
      </if>
      <if test="record.caseId != null">
        case_id = #{record.caseId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update sin_path_fee
    set pathfee_id = #{record.pathfeeId,jdbcType=INTEGER},
      pid = #{record.pid,jdbcType=INTEGER},
      did = #{record.did,jdbcType=INTEGER},
      path_id = #{record.pathId,jdbcType=INTEGER},
      hosp_exp = #{record.hospExp,jdbcType=VARCHAR},
      med_exp = #{record.medExp,jdbcType=VARCHAR},
      drug_exp = #{record.drugExp,jdbcType=VARCHAR},
      case_id = #{record.caseId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.path.bean.Sinpathfee">
    update sin_path_fee
    <set>
      <if test="pid != null">
        pid = #{pid,jdbcType=INTEGER},
      </if>
      <if test="did != null">
        did = #{did,jdbcType=INTEGER},
      </if>
      <if test="pathId != null">
        path_id = #{pathId,jdbcType=INTEGER},
      </if>
      <if test="hospExp != null">
        hosp_exp = #{hospExp,jdbcType=VARCHAR},
      </if>
      <if test="medExp != null">
        med_exp = #{medExp,jdbcType=VARCHAR},
      </if>
      <if test="drugExp != null">
        drug_exp = #{drugExp,jdbcType=VARCHAR},
      </if>
      <if test="caseId != null">
        case_id = #{caseId,jdbcType=INTEGER},
      </if>
    </set>
    where pathfee_id = #{pathfeeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.path.bean.Sinpathfee">
    update sin_path_fee
    set pid = #{pid,jdbcType=INTEGER},
      did = #{did,jdbcType=INTEGER},
      path_id = #{pathId,jdbcType=INTEGER},
      hosp_exp = #{hospExp,jdbcType=VARCHAR},
      med_exp = #{medExp,jdbcType=VARCHAR},
      drug_exp = #{drugExp,jdbcType=VARCHAR},
      case_id = #{caseId,jdbcType=INTEGER}
    where pathfee_id = #{pathfeeId,jdbcType=INTEGER}
  </update>
</mapper>